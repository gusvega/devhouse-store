{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: 'AIzaSyCV1RLeXKxN4Ivy23AHJ096AtkGFVm5YIc',\n  authDomain: 'devhouse-db.firebaseapp.com',\n  databaseURL: 'https://devhouse-db.firebaseio.com',\n  projectId: 'devhouse-db',\n  storageBucket: 'devhouse-db.appspot.com',\n  messagingSenderId: '856241225067',\n  appId: '1:856241225067:web:da472f8102fd8a616aa02e',\n  measurementId: 'G-9NW0GEV28C'\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getUserCartRef = async userId => {\n  const cartsRef = firestore.collection('carts').where('userId', '==', userId);\n  const snapShot = await cartsRef.get();\n\n  if (snapShot.empty) {\n    const cartDocRef = firestore.collection('carts').doc();\n    await cartDocRef.set({\n      userId,\n      cartItems: []\n    });\n    return cartDocRef;\n  } else {\n    return snapShot.docs[0].ref;\n  }\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/gux/Documents/GitHub/Developement/Development/Projects/ZeroToMastery/Master React/crwn-clothing/client/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getUserCartRef","userId","cartsRef","collection","where","empty","cartDocRef","cartItems","docs","ref","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n\tapiKey: 'AIzaSyCV1RLeXKxN4Ivy23AHJ096AtkGFVm5YIc',\n\tauthDomain: 'devhouse-db.firebaseapp.com',\n\tdatabaseURL: 'https://devhouse-db.firebaseio.com',\n\tprojectId: 'devhouse-db',\n\tstorageBucket: 'devhouse-db.appspot.com',\n\tmessagingSenderId: '856241225067',\n\tappId: '1:856241225067:web:da472f8102fd8a616aa02e',\n\tmeasurementId: 'G-9NW0GEV28C'\n};\n\nfirebase.initializeApp(config);\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\tif (!userAuth) return;\n\n\tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n\n\tconst snapShot = await userRef.get();\n\n\tif (!snapShot.exists) {\n\t\tconst { displayName, email } = userAuth;\n\t\tconst createdAt = new Date();\n\t\ttry {\n\t\t\tawait userRef.set({\n\t\t\t\tdisplayName,\n\t\t\t\temail,\n\t\t\t\tcreatedAt,\n\t\t\t\t...additionalData\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tconsole.log('error creating user', error.message);\n\t\t}\n\t}\n\n\treturn userRef;\n};\n\nexport const getUserCartRef = async (userId) => {\n\tconst cartsRef = firestore.collection('carts').where('userId', '==', userId);\n\tconst snapShot = await cartsRef.get();\n\n\tif (snapShot.empty) {\n\t\tconst cartDocRef = firestore.collection('carts').doc();\n\t\tawait cartDocRef.set({ userId, cartItems: [] });\n\t\treturn cartDocRef;\n\t} else {\n\t\treturn snapShot.docs[0].ref;\n\t}\n};\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n\tconst collectionRef = firestore.collection(collectionKey);\n\n\tconst batch = firestore.batch();\n\tobjectsToAdd.forEach((obj) => {\n\t\tconst newDocRef = collectionRef.doc();\n\t\tbatch.set(newDocRef, obj);\n\t});\n\n\treturn await batch.commit();\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n\tconst transformedCollection = collections.docs.map((doc) => {\n\t\tconst { title, items } = doc.data();\n\n\t\treturn {\n\t\t\trouteName: encodeURI(title.toLowerCase()),\n\t\t\tid: doc.id,\n\t\t\ttitle,\n\t\t\titems\n\t\t};\n\t});\n\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nexport const getCurrentUser = () => {\n\treturn new Promise((resolve, reject) => {\n\t\tconst unsubscribe = auth.onAuthStateChanged((userAuth) => {\n\t\t\tunsubscribe();\n\t\t\tresolve(userAuth);\n\t\t}, reject);\n\t});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}